openapi: 3.0.1
info:
  title: Tutelar
  description: Auth microservice
  version: '0.1'
servers:
  - url: 'https://lvh.me:9443'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    TokenData:
      type: object
      properties:
        token:
          type: string
        refreshToken:
          type: string
      example:
        {
          "token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1NTM1Mjk4MjcsImlkIjoiODVhYjE4MjEtODVjYy00NTc5LTg2OWQtZDdkNjU1ODM5ZjhhIn0.TMwADN7addtQPo39KcbF9yVrk-CHv4eSsiA8wNJxfsk",
          "refreshToken":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1NTM1Mjk4MjcsImlkIjoiODVhYjE4MjEtODVjYy00NTc5LTg2OWQtZDdkNjU1ODM5ZjhhIn0.TMwADN7addtQPo39KcbF9yVrk-CHv4eSsiA8wNJxfsk"
        }
paths:
  /core/delete:
    post:
      description: Delete own user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
  /core/unlink:
    post:
      description: Unlink an account from user
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: ["authType"]
              properties:
                authType:
                  type: string
            examples:
              '0':
                value: >-
                  {"authType":"github"}
      responses:
        '200':
          description: Success
  /core/refresh-token:
    post:
      description: Get new tokens by refresh token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: ["refreshToken"]
              properties:
                refreshToken:
                  type: string
            examples:
              '0':
                value: >-
                  {"refreshToken":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1NTM1Mjk4MjcsImlkIjoiODVhYjE4MjEtODVjYy00NTc5LTg2OWQtZDdkNjU1ODM5ZjhhIn0.TMwADN7addtQPo39KcbF9yVrk-CHv4eSsiA8wNJxfsk"}
      responses:
        '200':
          description: User tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenData'
  /basic/register:
    post:
      description: Simple user-pass register
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: ["username", "password"]
              properties:
                password:
                  type: string
                data:
                  type: object
                username:
                  type: string
            examples:
              '0':
                value: >-
                  {"username":"bob","password":"pw","data":{"fullname":"Bob Name"}}
      responses:
        '200':
          description: User tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenData'
  /basic/login:
    post:
      description: Simple user-pass login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: ["password", "username"]
              properties:
                password:
                  type: string
                data:
                  type: object
                username:
                  type: string
                refreshToken:
                  type: string
            examples:
              '0':
                value: >-
                  {"username":"bob","password":"pw","data":{"fullname":"Bob  Name"}}
      responses:
        '200':
          description: User tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenData'
  /email/send-register:
    post:
      description: Email-pass send register email
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: ["email"]
              properties:
                email:
                  type: string
            examples:
              '0':
                value: '{"email": "bob@bobemail.com"}'
      responses:
        '200':
          description: Email sent
  /email/register:
    post:
      description: Email-pass register
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: ["token", "password"]
              properties:
                password:
                  type: string
                data:
                  type: object
                token:
                  type: string
            examples:
              '0':
                value: >-
                  {"token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1NTM1Mjk4ODQsImVtYWlsIjoiYm9iQGJvYmVtYWlsLmNvbSIsInR5cGUiOiJyZWdpc3RlciJ9.ERObZTjxTxJk9XtttWobylBFI4nbm3dZymoT6jy5iMk",
                  "password": "pw", "data": {"fullname": "Bob Name"}}
      responses:
        '200':
          description: User tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenData'
  /email/login:
    post:
      description: Email-pass login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: ["email", "password"]
              properties:
                password:
                  type: string
                data:
                  type: object
                email:
                  type: string
                refreshToken:
                  type: string
            examples:
              '0':
                value: >-
                  {"email":"bob@bobemail.com", "password": "pw", "data":
                  {"fullname": "Bob Name"}}
      responses:
        '200':
          description: User tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenData'
  /email/send-reset-password:
    post:
      description: Email-pass send reset password email
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: ["email"]
              properties:
                email:
                  type: string
            examples:
              '0':
                value: '{"email":"bob@bobemail.com"}'
      responses:
        '200':
          description: Email sent
  /email/reset-password:
    post:
      description: Email-pass change the password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: ["token", "password"]
              properties:
                password:
                  type: string
                data:
                  type: object
                token:
                  type: string
            examples:
              '0':
                value: >-
                  {"token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1NTM1MzAxOTMsImVtYWlsIjoiYm9iQGJvYmVtYWlsLmNvbSIsInR5cGUiOiJyZXNldCJ9.Z-Y-S27wfTDJyuSC0QiD0ST9W-FjfTg5phoQO9Wgy10",
                  "password": "newpw", "data": {"fullname": "Bob Name"}}
      responses:
        '200':
          description: User tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenData'
  /ldap/login:
    post:
      description: LDAP login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: ["username", "password"]
              properties:
                password:
                  type: string
                username:
                  type: string
                refreshToken:
                  type: string
            examples:
              '0':
                value: '{"username":"bob","password":"bobpw"}'
      responses:
        '200':
          description: User tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenData'
  /ldap/users:
    get:
      description: List all LDAP user
      responses:
        '200':
          description: LDAP users with data from LDAP and tutelar id if exists
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    ldapData:
                      type: object
                  required:
                    - ldapData
              examples:
                '0':
                  value:
                    - id: '93571113-42d5-4e88-b347-95dafda4b6eb'
                      ldapData:
                        cn: bob
                        givenName: Bob
                        memberOf:
                          - 'cn=group1,ou=groups,dc=wanari,dc=com'
                        sn: Dilday
                    - ldapData:
                        cn: alice
                        givenName: Alice
                        memberOf:
                          - 'cn=group1,ou=groups,dc=wanari,dc=com'
                          - 'cn=group2,ou=groups,dc=wanari,dc=com'
                        sn: Smith
  /github/login:
    get:
      description: Login with GitHub
      responses:
        default:
          description: Redirect to GitHub login page
    post:
      description: Login with GitHub access token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: ["accessToken"]
              properties:
                accessToken:
                  type: string
            examples:
              '0':
                value: '{"accessToken":"TOKEN"}'
      responses:
        '200':
          description: User tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenData'
  /github/callback:
    get:
      description: GitHub login callback
      parameters:
        - name: code
          in: query
          schema:
            type: string
        - name: state
          in: query
          schema:
            type: string
      responses:
        default:
          description: Redirect to frontend with user token
  /facebook/login:
    get:
      description: Login with Facebook
      responses:
        default:
          description: Redirect to Facebook login page
    post:
      description: Login with Facebook access token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: ["accessToken"]
              properties:
                accessToken:
                  type: string
            examples:
              '0':
                value: '{"accessToken":"TOKEN"}'
      responses:
        '200':
          description: User tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenData'
  /facebook/callback:
    get:
      description: Facebook login callback
      parameters:
        - name: code
          in: query
          schema:
            type: string
        - name: state
          in: query
          schema:
            type: string
      responses:
        default:
          description: Redirect to frontend with user token
  /google/login:
    get:
      description: Login with Google
      responses:
        default:
          description: Redirect to Google login page
    post:
      description: Login with Google access token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: ["accessToken"]
              properties:
                accessToken:
                  type: string
            examples:
              '0':
                value: '{"accessToken":"TOKEN"}'
      responses:
        '200':
          description: User tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenData'
  /google/callback:
    get:
      description: Google login callback
      parameters:
        - name: code
          in: query
          schema:
            type: string
        - name: state
          in: query
          schema:
            type: string
      responses:
        default:
          description: Redirect to frontend with user token
  /healthCheck:
    get:
      description: Service status page
      responses:
        '200':
          description: Service status
          content:
            application/json:
              schema:
                type: object
                properties:
                  database:
                    type: boolean
                  success:
                    type: boolean
                  version:
                    type: string
                  buildAtString:
                    type: string
                  buildAtMillis:
                    type: number
                  commitHash:
                    type: string
              examples:
                '0':
                  value: >-
                    {"database":true,"success":true,"version":"development","buildAtString":"2019-05-05 08:07:09.309","buildAtMillis":1557043629309,"commitHash":"7919619d80b76ff5804e30880bea696cd605a635"}

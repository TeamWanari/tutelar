conf {
  configType = "conf"
  file = "runtime.conf"
}

// core modules: health, rabbitmq
// auth modules: basic, email, ldap, github, google, facebook, totp
modulesEnabled = "health,basic,email,ldap,github,google,facebook,totp"
modulesEnabled = ${?MODULES_ENABLED}

database {
  // memory, postgres, mongo
  type = "memory"
  type = ${?DATABASE_TYPE}

  postgres {
    driver = "org.postgresql.Driver"
    url = "jdbc:postgresql://localhost:5432/postgres?user=postgres&password=postgres"
    url = ${?DB_URL}
    numThreads = 5
    maximumPoolSize = 20
    connectionPool = "HikariCP"
  }

  mongo {
    uri = "mongodb://localhost/tutelar"
    uri = ${?DB_URI}
    uriFile = ${?DB_URI_FILE}
    collection = "users"
    collection = ${?DB_COLLECTION}
  }
}

jwt {
  shortTerm {
    expirationTime = "1h"
    expirationTime = ${?SHORT_JWT_EXPIRATION_TIME}
    // Symmetric: HMD5 | HS224 | HS256 | HS384 | HS512
    // Asymmetric: RS256 | RS384 | RS512 | ES256 | ES384 | ES512
    algorithm = "HS256"
    algorithm = ${?SHORT_JWT_ALGORITHM}
    secret = "secret"
    secret = ${?SHORT_JWT_SECRET}
    secretFile = ${?SHORT_JWT_SECRET_FILE}
    privateKey = ""
    privateKey = ${?SHORT_JWT_PRIVATE_KEY}
    privateKeyFile = ${?SHORT_JWT_PRIVATE_KEY_FILE}
    publicKey = ""
    publicKey = ${?SHORT_JWT_PUBLIC_KEY}
    publicKeyFile = ${?SHORT_JWT_PUBLIC_KEY_FILE}
  }
  longTerm {
    expirationTime = "1d"
    expirationTime = ${?LONG_JWT_EXPIRATION_TIME}
    // Symmetric: HMD5 | HS224 | HS256 | HS384 | HS512
    // Asymmetric: RS256 | RS384 | RS512 | ES256 | ES384 | ES512
    algorithm = "HS256"
    algorithm = ${?LONG_JWT_ALGORITHM}
    secret = "secret_long"
    secret = ${?LONG_JWT_SECRET}
    secretFile = ${?LONG_JWT_SECRET_FILE}
    privateKey = ""
    privateKey = ${?LONG_JWT_PRIVATE_KEY}
    privateKeyFile = ${?LONG_JWT_PRIVATE_KEY_FILE}
    publicKey = ""
    publicKey = ${?LONG_JWT_PUBLIC_KEY}
    publicKeyFile = ${?LONG_JWT_PUBLIC_KEY_FILE}
  }
  emailProvider {
    expirationTime = "30m"
    expirationTime = ${?EMAIL_JWT_EXPIRATION_TIME}
    // Symmetric: HMD5 | HS224 | HS256 | HS384 | HS512
    // Asymmetric: RS256 | RS384 | RS512 | ES256 | ES384 | ES512
    algorithm = "HS256"
    algorithm = ${?EMAIL_JWT_ALGORITHM}
    secret = "secret_email"
    secret = ${?EMAIL_JWT_SECRET}
    secretFile = ${?EMAIL_JWT_SECRET_FILE}
    privateKey = ""
    privateKey = ${?EMAIL_JWT_PRIVATE_KEY}
    privateKeyFile = ${?EMAIL_JWT_PRIVATE_KEY_FILE}
    publicKey = ""
    publicKey = ${?EMAIL_JWT_PUBLIC_KEY}
    publicKeyFile = ${?EMAIL_JWT_PUBLIC_KEY_FILE}
  }
  totpProvider {
    expirationTime = "10m"
    expirationTime = ${?TOTP_JWT_EXPIRATION_TIME}
    // Symmetric: HMD5 | HS224 | HS256 | HS384 | HS512
    // Asymmetric: RS256 | RS384 | RS512 | ES256 | ES384 | ES512
    algorithm = "HS256"
    algorithm = ${?TOTP_JWT_ALGORITHM}
    secret = "secret_email"
    secret = ${?TOTP_JWT_SECRET}
    secretFile = ${?TOTP_JWT_SECRET_FILE}
    privateKey = ""
    privateKey = ${?TOTP_JWT_PRIVATE_KEY}
    privateKeyFile = ${?TOTP_JWT_PRIVATE_KEY_FILE}
    publicKey = ""
    publicKey = ${?TOTP_JWT_PUBLIC_KEY}
    publicKeyFile = ${?TOTP_JWT_PUBLIC_KEY_FILE}
  }
}

callback {
  success = "https://lvh.me:9443/index.html?token=<<TOKEN>>&refresh_token=<<REFRESH_TOKEN>>"
  success = ${?CALLBACK_SUCCESS}
  failure = "https://lvh.me:9443/index.html?error=<<ERROR>>"
  failure = ${?CALLBACK_FAILURE}
}

hook {
  // empty == hook module off
  baseUrl = ""
  baseUrl = ${?HOOK_BASE_PATH}

  // basic
  authType = "basic"
  authType = ${?HOOK_AUTH_TYPE}

  basicAuth {
    username = ""
    username = ${?HOOK_BASIC_USERNAME}
    password = ""
    password = ${?HOOK_BASIC_PASSWORD}
    passwordFile = ${?HOOK_BASIC_PASSWORD_FILE}
  }
}

amqp {
  uri = "amqp://guest:guest@127.0.0.1:5672"
  uri = ${?AMQP_URI}
  uriFile = ${?AMQP_URI_FILE}
}

tracer {
  // off, jaeger
  client = "jaeger"
  client = ${?TRACER_CLIENT}
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
}

// core modules: health, rabbitmq
// auth modules: basic, email, ldap, github, google, facebook, totp
modulesEnabled = "health,basic,email,ldap,totp"
modulesEnabled = ${?MODULES_ENABLED}

database {
  // memory, postgres, mongo
  type = "memory"
  type = ${?DATABASE_TYPE}

  postgres {
    driver = "org.postgresql.Driver"
    url = "jdbc:postgresql://localhost:5432/postgres?user=postgres&password=postgres"
    url = ${?POSTGRES_URL}
    numThreads = 5
    numThreads = ${?POSTGRES_THREADS}
    maximumPoolSize = 20
    maximumPoolSize = ${?POSTGRES_MAX_POOL_SIZE}
    connectionPool = "HikariCP"
  }

  mongo {
    uri = "mongodb://localhost/tutelar"
    uri = ${?MONGO_URI}
    uriFile = ${?MONGO_URI_FILE}
    collection = "users"
    collection = ${?MONGO_COLLECTION}
  }
}

jwt {
  shortTerm {
    expirationTime = "1h"
    expirationTime = ${?SHORT_JWT_EXPIRATION_TIME}
    // Symmetric: HMD5 | HS224 | HS256 | HS384 | HS512
    // Asymmetric: RS256 | RS384 | RS512 | ES256 | ES384 | ES512
    algorithm = "HS256"
    algorithm = ${?SHORT_JWT_ALGORITHM}
    secret = "secret"
    secret = ${?SHORT_JWT_SECRET}
    secretFile = ${?SHORT_JWT_SECRET_FILE}
    privateKey = ""
    privateKey = ${?SHORT_JWT_PRIVATE_KEY}
    privateKeyFile = ${?SHORT_JWT_PRIVATE_KEY_FILE}
    publicKey = ""
    publicKey = ${?SHORT_JWT_PUBLIC_KEY}
    publicKeyFile = ${?SHORT_JWT_PUBLIC_KEY_FILE}
  }
  longTerm {
    expirationTime = "1d"
    expirationTime = ${?LONG_JWT_EXPIRATION_TIME}
    // Symmetric: HMD5 | HS224 | HS256 | HS384 | HS512
    // Asymmetric: RS256 | RS384 | RS512 | ES256 | ES384 | ES512
    algorithm = "HS256"
    algorithm = ${?LONG_JWT_ALGORITHM}
    secret = "secret_long"
    secret = ${?LONG_JWT_SECRET}
    secretFile = ${?LONG_JWT_SECRET_FILE}
    privateKey = ""
    privateKey = ${?LONG_JWT_PRIVATE_KEY}
    privateKeyFile = ${?LONG_JWT_PRIVATE_KEY_FILE}
    publicKey = ""
    publicKey = ${?LONG_JWT_PUBLIC_KEY}
    publicKeyFile = ${?LONG_JWT_PUBLIC_KEY_FILE}
  }
  emailProvider {
    expirationTime = "30m"
    expirationTime = ${?EMAIL_JWT_EXPIRATION_TIME}
    // Symmetric: HMD5 | HS224 | HS256 | HS384 | HS512
    // Asymmetric: RS256 | RS384 | RS512 | ES256 | ES384 | ES512
    algorithm = "HS256"
    algorithm = ${?EMAIL_JWT_ALGORITHM}
    secret = "secret_email"
    secret = ${?EMAIL_JWT_SECRET}
    secretFile = ${?EMAIL_JWT_SECRET_FILE}
    privateKey = ""
    privateKey = ${?EMAIL_JWT_PRIVATE_KEY}
    privateKeyFile = ${?EMAIL_JWT_PRIVATE_KEY_FILE}
    publicKey = ""
    publicKey = ${?EMAIL_JWT_PUBLIC_KEY}
    publicKeyFile = ${?EMAIL_JWT_PUBLIC_KEY_FILE}
  }
  totpProvider {
    expirationTime = "10m"
    expirationTime = ${?TOTP_JWT_EXPIRATION_TIME}
    // Symmetric: HMD5 | HS224 | HS256 | HS384 | HS512
    // Asymmetric: RS256 | RS384 | RS512 | ES256 | ES384 | ES512
    algorithm = "HS256"
    algorithm = ${?TOTP_JWT_ALGORITHM}
    secret = "secret_email"
    secret = ${?TOTP_JWT_SECRET}
    secretFile = ${?TOTP_JWT_SECRET_FILE}
    privateKey = ""
    privateKey = ${?TOTP_JWT_PRIVATE_KEY}
    privateKeyFile = ${?TOTP_JWT_PRIVATE_KEY_FILE}
    publicKey = ""
    publicKey = ${?TOTP_JWT_PUBLIC_KEY}
    publicKeyFile = ${?TOTP_JWT_PUBLIC_KEY_FILE}
  }
}

callback {
  success = "https://lvh.me:9443/index.html?token=<<TOKEN>>&refresh_token=<<REFRESH_TOKEN>>"
  success = ${?CALLBACK_SUCCESS}
  failure = "https://lvh.me:9443/index.html?error=<<ERROR>>"
  failure = ${?CALLBACK_FAILURE}
}

escher {
  credential-scope = "eu/tutelar/request"
  credential-scope = ${?ESCHER_SCOPE}
  auth-header-name = "X-Escher-Auth"
  auth-header-name = ${?ESCHER_AUTH_HEADER}
  date-header-name = "X-Escher-Date"
  date-header-name = ${?ESCHER_DATE_HEADER}
  algo-prefix = "ESR"
  algo-prefix = ${?ESCHER_ALGO_PREFIX}
  vendor-key = "Escher"
  vendor-key = ${?ESCHER_VENDOR_KEY}
  hostname = "localhost"
  hostname = ${?ESCHER_HOSTNAME}
  port = "9000"
  port = ${?ESCHER_PORT}

  trusted-services = [
    {
      name = "hook"
      key = "hook-service-key"
      key = ${?ESCHER_SERVICE_HOOK_KEY}
      secret = "hook-service-secret-key"
      secret = ${?ESCHER_SERVICE_HOOK_SECRET}
      credential-scope = "eu/tutelar/request"
      credential-scope =  ${?ESCHER_SERVICE_HOOK_SCOPE}
    }
  ]
}

hook {
  // empty == hook module off
  baseUrl = ""
  baseUrl = ${?HOOK_BASE_PATH}

  // basic, escher
  authType = "basic"
  authType = ${?HOOK_AUTH_TYPE}

  basicAuth {
    username = ""
    username = ${?HOOK_BASIC_USERNAME}
    password = ""
    password = ${?HOOK_BASIC_PASSWORD}
    passwordFile = ${?HOOK_BASIC_PASSWORD_FILE}
  }
}

amqp {
  uri = "amqp://guest:guest@127.0.0.1:5672"
  uri = ${?AMQP_URI}
  uriFile = ${?AMQP_URI_FILE}
}

tracer {
  // off, jaeger
  client = "off"
  client = ${?TRACER_CLIENT}
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
}

oauth2 {
  rootUrl = "https://lvh.me:9443"
  rootUrl = ${?ROOT_URL}

  facebook {
    clientId = ${?FACEBOOK_CLIENT_ID}
    clientSecret = ${?FACEBOOK_CLIENT_SECRET}
    clientSecretFile = ${?FACEBOOK_CLIENT_SECRET_FILE}
    scopes = "public_profile"
  }

  github {
    clientId = ${?GITHUB_CLIENT_ID}
    clientSecret = ${?GITHUB_CLIENT_SECRET}
    clientSecretFile = ${?GITHUB_CLIENT_SECRET_FILE}
    scopes = "read:user,gist"
  }

  google {
    clientId = ${?GOOGLE_CLIENT_ID}
    clientSecret = ${?GOOGLE_CLIENT_SECRET}
    clientSecretFile = ${?GOOGLE_CLIENT_SECRET_FILE}
    scopes = "openid,email,profile"
  }

}

ldap {
  url = "ldap://localhost:389"
  url = ${?LDAP_URL}
  readonlyUserWithNamespace = "cn=readonly,dc=wanari,dc=com"
  readonlyUserWithNamespace = ${?LDAP_READONLY_USER_WITH_NAMESPACE}
  readonlyUserPassword = "readonly"
  readonlyUserPassword = ${?LDAP_READONLY_USER_PASSWORD}
  readonlyUserPasswordFile = ${?LDAP_READONLY_USER_PASSWORD_FILE}
  userSearchBaseDomain = "ou=users,dc=wanari,dc=com"
  userSearchBaseDomain = ${?LDAP_USER_SEARCH_BASE_DOMAIN}
  userSearchAttribute = "cn"
  userSearchAttribute = ${?LDAP_USER_SEARCH_ATTRIBUTE}
  userSearchReturnAttributes = "cn,sn,givenName"
  userSearchReturnAttributes = ${?LDAP_USER_SEARCH_RETURN_ATTRIBUTES}
  userSearchReturnArrayAttributes = "memberof"
  userSearchReturnArrayAttributes = ${?LDAP_USER_SEARCH_RETURN_ARRAY_ATTRIBUTES}
}

userpass {
  passwordDifficulty {
    // Min 8 characters, at least one uppercase one lowercase letter and one number
    pattern = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{8,}$"
    pattern = ${?PASSWORD_PATTERN}
  }

  email {
    // http, amqp
    type = "http"
    type = ${?EMAIL_SERVICE_TYPE}

    http {
      serviceUrl = "http://localhost:9010"
      serviceUrl =  ${?EMAIL_HTTP_SERVICE_URL}
      serviceUsername = ""
      serviceUsername = ${?EMAIL_HTTP_SERVICE_USERNAME}
      servicePassword = "super_secret_123"
      servicePassword = ${?EMAIL_HTTP_SERVICE_PASSWORD}
      servicePasswordFile = ${?EMAIL_HTTP_SERVICE_PASSWORD_FILE}
    }

    amqp {
      routing-key = "tutelar_email"
      routing-key = ${?EMAIL_SERVICE_AMQP_ROUTING_KEY}
      exchange = "amq.topic"
      exchange = ${?EMAIL_SERVICE_AMQP_EXCHANGE}
      buffer-size = 100
      buffer-size = ${?EMAIL_SERVICE_AMQP_BUFFER_SIZE}
    }
  }
}

totp {
  algorithm = "SHA1" // MD5, SHA1, SHA256, SHA512
  algorithm = ${?TOTP_ALGORITHM}
  window = 1
  window = ${?TOTP_WINDOW}
  period = 30s
  period = ${?TOTP_PERIOD}
  digits = 6
  digits = ${?TOTP_DIGITS}
  startFromCurrentTime = false
  startFromCurrentTime = ${?TOTP_START_FROM_CURRENT_TIME}
}

jaeger {
  serviceName = "tutelar"

  sampler {
    type = "const"
    param = 1
  }

  reporter {
    withLogSpans = true
  }
}

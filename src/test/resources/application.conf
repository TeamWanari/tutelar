conf {
  configType = "conf"
  file = "runtime.conf"
}

// basic, email, ldap, github, google, facebook, totp
modulesEnabled = "testModule1, testModule2,,testModule3"

database {
  type = "DBTYPE"

  mongo {
    uri = "URI"
    collection = "COLLECTION"
  }
}

jwt {
  example {
    expirationTime = "1d"
    algorithm = "HS256"
    secret = "secret"
    privateKey = "private"
    publicKey = "public"
  }
}

callback {
  success = "url?t=<<TOKEN>>&rt=<<REFRESH_TOKEN>>"
  failure = "url?e=<<ERROR>>"
}

hook {
  enabled = "register,login,modify,link,unlink,delete,refresh"

  baseUrl = "https://backend/hook"

  authType = "basic"

  basicAuth {
    username = "user"
    password = "pass"
  }
}

tracer {
  client = "off"
}

oauth2 {
  rootUrl = "https://lvh.me:9443"

  github {
    clientId = "clientId"
    clientSecret = "clientSecret"
    scopes = "read:user"
  }

  google {
    clientId = "clientId"
    clientSecret = "clientSecret"
    scopes = "openid,email,profile"
  }

  facebook {
    clientId = "clientId"
    clientSecret = "clientSecret"
    scopes = "public_profile"
  }
}

ldap {
  url = "ldap://1.2.3.4:389"
  readonlyUserWithNamespace = "cn=readonly,dc=example,dc=com"
  readonlyUserPassword = "readonlypw"
  userSearchBaseDomain = "ou=peaple,dc=example,dc=com"
  userSearchAttribute = "cn"
  userSearchReturnAttributes = "cn,sn,email"
  userSearchReturnArrayAttributes = "memberof"
}

userpass {
  passwordDifficulty {
    pattern = "PATTERN"
  }
  email {
    type = "TYPE"
    amqp {
      queue-name = "NAME"
      buffer-size = 777
    }
    smtp {
      host = "HOST"
      port = 1025
      ssl = true
      username = "USER"
      password = "PASS"
      template {
        senderAddress = "SENDER_EMAIL"
        registerTitle = "REGISTER_TITLE"
        registerBody = "REGISTER_BODY"
        resetPasswordTitle = "RESET_PASSWORD_TITLE"
        resetPasswordBody = "RESET_PASSWORD_BODY"
      }
    }
  }
}
providerLoginExpiration = ""
providerLoginExpiration {
  aaaprovider {
    type = ""
  }
  bbbprovider {
    type = "inactivity"
    duration = "1day"
  }
  cccprovider {
    type = "lifetime"
    duration = "1hour"
  }
}

exampleServiceApiBasic {
  auth = "basic"
  basic {
    username = "u"
    password = "p"
  }
}
exampleServiceApiEscher {
  auth = "escher"
  escher {
    trustedServices = "service1,service2"
  }
}
exampleServiceApiJwt {
  auth = "jwt"
  jwt {
    configName = "example"
  }
}
exampleServiceApiBlocked {
  auth = "blocked"
}

escher-test {
  credential-scope = "eu/tutelar/request"
  auth-header-name = "X-Escher-Auth"
  date-header-name = "X-Escher-Date"
  headers-to-sign = ["host", "X-Escher-Date"]
  algo-prefix = "ESR"
  vendor-key = "Escher"
  hostname = "localhost"
  port = "9000"

  trusted-services = [
    {
      name = "test-service"
      key = "test-key"
      secret = "test-secret-key"
      credential-scope = "eu/tutelar/request"
    }
  ]
}

extraConf_1 = "tutelar not extra"
